{"ast":null,"code":"var _jsxFileName = \"/Users/a366/pizza/src/componets/Sort.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Sort(_ref) {\n  _s();\n  let {\n    valueSort,\n    onClickSort\n  } = _ref;\n  const [Open, setIsOpen] = useState(false);\n  const List = [{\n    name: \"популярности\",\n    sort: \"rating\"\n  }, {\n    name: \"цене\",\n    sort: \"price\"\n  }, {\n    name: \"алфавиту\",\n    sort: \"title\"\n  }];\n  const sortName = List[valueSort].name;\n  const onClickListItem = index => {\n    onClickSort(index);\n    setIsOpen(false);\n  };\n\n  // setSelected(i); выбираем пункт\n  // setIsOpen(false); скрываются поля, после выбора какого-то пункта\n  // const sortName = List[Sorting]; сделали для того, чтобы при нажатии на выбор Сортиторвки, оставалось то значение, на которое мы кликнули\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sort\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sort__label\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        width: \"10\",\n        height: \"6\",\n        viewBox: \"0 0 10 6\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M10 5C10 5.16927 9.93815 5.31576 9.81445 5.43945C9.69075 5.56315 9.54427 5.625 9.375 5.625H0.625C0.455729 5.625 0.309245 5.56315 0.185547 5.43945C0.061849 5.31576 0 5.16927 0 5C0 4.83073 0.061849 4.68424 0.185547 4.56055L4.56055 0.185547C4.68424 0.061849 4.83073 0 5 0C5.16927 0 5.31576 0.061849 5.43945 0.185547L9.81445 4.56055C9.93815 4.68424 10 4.83073 10 5Z\",\n          fill: \"#2C2C2C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u043F\\u043E:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => setIsOpen(!Open),\n        children: sortName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), Open && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sort__popup\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: List.map((obj, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => onClickListItem(obj.sort),\n          className: valueSort === index ? \"active\" : \"\",\n          children: obj.name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(Sort, \"/7fMdTBp1lF/6Cjt4yJdljOdTvs=\");\n_c = Sort;\nexport default Sort;\nvar _c;\n$RefreshReg$(_c, \"Sort\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Sort","_ref","_s","valueSort","onClickSort","Open","setIsOpen","List","name","sort","sortName","onClickListItem","index","className","children","width","height","viewBox","fill","xmlns","d","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","obj","_c","$RefreshReg$"],"sources":["/Users/a366/pizza/src/componets/Sort.jsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction Sort({ valueSort, onClickSort }) {\n  const [Open, setIsOpen] = useState(false);\n\n  const List = [\n    { name: \"популярности\", sort: \"rating\" },\n    { name: \"цене\", sort: \"price\" },\n    { name: \"алфавиту\", sort: \"title\" },\n  ];\n  const sortName = List[valueSort].name;\n\n  const onClickListItem = (index) => {\n    onClickSort(index);\n    setIsOpen(false);\n  };\n\n  // setSelected(i); выбираем пункт\n  // setIsOpen(false); скрываются поля, после выбора какого-то пункта\n  // const sortName = List[Sorting]; сделали для того, чтобы при нажатии на выбор Сортиторвки, оставалось то значение, на которое мы кликнули\n\n  return (\n    <div className=\"sort\">\n      <div className=\"sort__label\">\n        <svg\n          width=\"10\"\n          height=\"6\"\n          viewBox=\"0 0 10 6\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M10 5C10 5.16927 9.93815 5.31576 9.81445 5.43945C9.69075 5.56315 9.54427 5.625 9.375 5.625H0.625C0.455729 5.625 0.309245 5.56315 0.185547 5.43945C0.061849 5.31576 0 5.16927 0 5C0 4.83073 0.061849 4.68424 0.185547 4.56055L4.56055 0.185547C4.68424 0.061849 4.83073 0 5 0C5.16927 0 5.31576 0.061849 5.43945 0.185547L9.81445 4.56055C9.93815 4.68424 10 4.83073 10 5Z\"\n            fill=\"#2C2C2C\"\n          />\n        </svg>\n        <b>Сортировка по:</b>\n        <span onClick={() => setIsOpen(!Open)}>{sortName}</span>\n      </div>\n      {Open && (\n        <div className=\"sort__popup\">\n          <ul>\n            {List.map((obj, index) => (\n              <li\n                key={index}\n                onClick={() => onClickListItem(obj.sort)}\n                className={valueSort === index ? \"active\" : \"\"}\n              >\n                {obj.name}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Sort;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,IAAIA,CAAAC,IAAA,EAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,SAAS;IAAEC;EAAY,CAAC,GAAAH,IAAA;EACtC,MAAM,CAACI,IAAI,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEzC,MAAMU,IAAI,GAAG,CACX;IAAEC,IAAI,EAAE,cAAc;IAAEC,IAAI,EAAE;EAAS,CAAC,EACxC;IAAED,IAAI,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAQ,CAAC,EAC/B;IAAED,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAQ,CAAC,CACpC;EACD,MAAMC,QAAQ,GAAGH,IAAI,CAACJ,SAAS,CAAC,CAACK,IAAI;EAErC,MAAMG,eAAe,GAAIC,KAAK,IAAK;IACjCR,WAAW,CAACQ,KAAK,CAAC;IAClBN,SAAS,CAAC,KAAK,CAAC;EAClB,CAAC;;EAED;EACA;EACA;;EAEA,oBACEP,OAAA;IAAKc,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBf,OAAA;MAAKc,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1Bf,OAAA;QACEgB,KAAK,EAAC,IAAI;QACVC,MAAM,EAAC,GAAG;QACVC,OAAO,EAAC,UAAU;QAClBC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAC,4BAA4B;QAAAL,QAAA,eAElCf,OAAA;UACEqB,CAAC,EAAC,2WAA2W;UAC7WF,IAAI,EAAC;QAAS;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACd;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACE,eACNzB,OAAA;QAAAe,QAAA,EAAG;MAAc;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eACrBzB,OAAA;QAAM0B,OAAO,EAAEA,CAAA,KAAMnB,SAAS,CAAC,CAACD,IAAI,CAAE;QAAAS,QAAA,EAAEJ;MAAQ;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAQ;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACpD,EACLnB,IAAI,iBACHN,OAAA;MAAKc,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1Bf,OAAA;QAAAe,QAAA,EACGP,IAAI,CAACmB,GAAG,CAAC,CAACC,GAAG,EAAEf,KAAK,kBACnBb,OAAA;UAEE0B,OAAO,EAAEA,CAAA,KAAMd,eAAe,CAACgB,GAAG,CAAClB,IAAI,CAAE;UACzCI,SAAS,EAAEV,SAAS,KAAKS,KAAK,GAAG,QAAQ,GAAG,EAAG;UAAAE,QAAA,EAE9Ca,GAAG,CAACnB;QAAI,GAJJI,KAAK;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAMb;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAER;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACG;AAEV;AAACtB,EAAA,CAtDQF,IAAI;AAAA4B,EAAA,GAAJ5B,IAAI;AAwDb,eAAeA,IAAI;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}