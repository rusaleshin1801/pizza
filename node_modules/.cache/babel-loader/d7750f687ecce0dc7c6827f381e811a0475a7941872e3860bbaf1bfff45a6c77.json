{"ast":null,"code":"var _jsxFileName = \"/Users/a366/pizza/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Header from \"./componets/Header\";\nimport Home from \"./pages/Home\";\n\n// import pizzas from \"./assets/pizza.json\";\n\nimport \"./scss/app.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n\n// // {items.map((obj) =>\n// //   isLoading ? (\n// //     <Skeleton />\n// //   ) : (\n// //     <PizzaBlock\n// //       key={obj.id}\n// //       title={obj.title}\n// //       price={obj.price}\n// //       imageUrl={obj.imageUrl}\n// //       sizes={obj.sizes}\n// //       types={obj.types}\n// //     />\n// //   )\n// // )} Выгружаем объект с пиццей блок, с помощью метода map,\n// меняем значения в блоке пицца(цена, название, картинку),\n// тянем их из pizza-block. Далее: если идет загрузка isLoading то загружается\n//  Скелетон, если загрузилась страница, то запускается Пицца блок\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","Home","jsxDEV","_jsxDEV","App","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/a366/pizza/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Header from \"./componets/Header\";\n\nimport Home from \"./pages/Home\";\n\n// import pizzas from \"./assets/pizza.json\";\n\nimport \"./scss/app.scss\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <Header />\n      <div className=\"content\">\n        <div className=\"container\">\n          <Home />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// // {items.map((obj) =>\n// //   isLoading ? (\n// //     <Skeleton />\n// //   ) : (\n// //     <PizzaBlock\n// //       key={obj.id}\n// //       title={obj.title}\n// //       price={obj.price}\n// //       imageUrl={obj.imageUrl}\n// //       sizes={obj.sizes}\n// //       types={obj.types}\n// //     />\n// //   )\n// // )} Выгружаем объект с пиццей блок, с помощью метода map,\n// меняем значения в блоке пицца(цена, название, картинку),\n// тянем их из pizza-block. Далее: если идет загрузка isLoading то загружается\n//  Скелетон, если загрузилась страница, то запускается Пицца блок\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,OAAOC,MAAM,MAAM,oBAAoB;AAEvC,OAAOC,IAAI,MAAM,cAAc;;AAE/B;;AAEA,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA;IAAKE,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBH,OAAA,CAACH,MAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACVP,OAAA;MAAKE,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtBH,OAAA;QAAKE,SAAS,EAAC,WAAW;QAAAC,QAAA,eACxBH,OAAA,CAACF,IAAI;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACJ;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV;AAACC,EAAA,GAXQP,GAAG;AAaZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}