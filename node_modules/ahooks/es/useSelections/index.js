import { useMemo, useState } from 'react';
import useMemoizedFn from '../useMemoizedFn';
export default function useSelections(items, defaultSelected = []) {
  const [selected, setSelected] = useState(defaultSelected);
  const selectedSet = useMemo(() => new Set(selected), [selected]);
  const isSelected = item => selectedSet.has(item);
  const select = item => {
    selectedSet.add(item);
    return setSelected(Array.from(selectedSet));
  };
  const unSelect = item => {
    selectedSet.delete(item);
    return setSelected(Array.from(selectedSet));
  };
  const toggle = item => {
    if (isSelected(item)) {
      unSelect(item);
    } else {
      select(item);
    }
  };
  const selectAll = () => {
    items.forEach(o => {
      selectedSet.add(o);
    });
    setSelected(Array.from(selectedSet));
  };
  const unSelectAll = () => {
    items.forEach(o => {
      selectedSet.delete(o);
    });
    setSelected(Array.from(selectedSet));
  };
  const noneSelected = useMemo(() => items.every(o => !selectedSet.has(o)), [items, selectedSet]);
  const allSelected = useMemo(() => items.every(o => selectedSet.has(o)) && !noneSelected, [items, selectedSet, noneSelected]);
  const partiallySelected = useMemo(() => !noneSelected && !allSelected, [noneSelected, allSelected]);
  const toggleAll = () => allSelected ? unSelectAll() : selectAll();
  return {
    selected,
    noneSelected,
    allSelected,
    partiallySelected,
    setSelected,
    isSelected,
    select: useMemoizedFn(select),
    unSelect: useMemoizedFn(unSelect),
    toggle: useMemoizedFn(toggle),
    selectAll: useMemoizedFn(selectAll),
    unSelectAll: useMemoizedFn(unSelectAll),
    toggleAll: useMemoizedFn(toggleAll)
  };
}