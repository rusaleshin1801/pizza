import { getTargetElement } from '../utils/domTarget';
import useDeepCompareEffectWithTarget from '../utils/useDeepCompareWithTarget';
import useLatest from '../useLatest';
const useMutationObserver = (callback, target, options = {}) => {
  const callbackRef = useLatest(callback);
  useDeepCompareEffectWithTarget(() => {
    const element = getTargetElement(target);
    if (!element) {
      return;
    }
    const observer = new MutationObserver(callbackRef.current);
    observer.observe(element, options);
    return () => {
      if (observer) {
        observer.disconnect();
      }
    };
  }, [options], target);
};
export default useMutationObserver;