import { useMemo, useRef } from 'react';
import { isFunction } from '../utils';
import useMemoizedFn from '../useMemoizedFn';
import useUpdate from '../useUpdate';
function useControllableValue(props = {}, options = {}) {
  const {
    defaultValue,
    defaultValuePropName = 'defaultValue',
    valuePropName = 'value',
    trigger = 'onChange'
  } = options;
  const value = props[valuePropName];
  const isControlled = props.hasOwnProperty(valuePropName);
  const initialValue = useMemo(() => {
    if (isControlled) {
      return value;
    }
    if (props.hasOwnProperty(defaultValuePropName)) {
      return props[defaultValuePropName];
    }
    return defaultValue;
  }, []);
  const stateRef = useRef(initialValue);
  if (isControlled) {
    stateRef.current = value;
  }
  const update = useUpdate();
  function setState(v, ...args) {
    const r = isFunction(v) ? v(stateRef.current) : v;
    if (!isControlled) {
      stateRef.current = r;
      update();
    }
    if (props[trigger]) {
      props[trigger](r, ...args);
    }
  }
  return [stateRef.current, useMemoizedFn(setState)];
}
export default useControllableValue;