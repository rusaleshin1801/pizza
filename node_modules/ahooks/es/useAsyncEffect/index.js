import { __awaiter } from "tslib";
import { useEffect } from 'react';
import { isFunction } from '../utils';
function useAsyncEffect(effect, deps) {
  function isAsyncGenerator(val) {
    return isFunction(val[Symbol.asyncIterator]);
  }
  useEffect(() => {
    const e = effect();
    let cancelled = false;
    function execute() {
      return __awaiter(this, void 0, void 0, function* () {
        if (isAsyncGenerator(e)) {
          while (true) {
            const result = yield e.next();
            if (result.done || cancelled) {
              break;
            }
          }
        } else {
          yield e;
        }
      });
    }
    execute();
    return () => {
      cancelled = true;
    };
  }, deps);
}
export default useAsyncEffect;