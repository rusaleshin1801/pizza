import { useState } from 'react';
import screenfull from 'screenfull';
import useLatest from '../useLatest';
import useMemoizedFn from '../useMemoizedFn';
import useUnmount from '../useUnmount';
import { getTargetElement } from '../utils/domTarget';
const useFullscreen = (target, options) => {
  const {
    onExit,
    onEnter
  } = options || {};
  const onExitRef = useLatest(onExit);
  const onEnterRef = useLatest(onEnter);
  const [state, setState] = useState(false);
  const onChange = () => {
    var _a, _b, _c;
    if (screenfull.isEnabled) {
      const el = getTargetElement(target);
      if (!screenfull.element) {
        (_a = onExitRef.current) === null || _a === void 0 ? void 0 : _a.call(onExitRef);
        setState(false);
        screenfull.off('change', onChange);
      } else {
        const isFullscreen = screenfull.element === el;
        if (isFullscreen) {
          (_b = onEnterRef.current) === null || _b === void 0 ? void 0 : _b.call(onEnterRef);
        } else {
          (_c = onExitRef.current) === null || _c === void 0 ? void 0 : _c.call(onExitRef);
        }
        setState(isFullscreen);
      }
    }
  };
  const enterFullscreen = () => {
    const el = getTargetElement(target);
    if (!el) {
      return;
    }
    if (screenfull.isEnabled) {
      try {
        screenfull.request(el);
        screenfull.on('change', onChange);
      } catch (error) {
        console.error(error);
      }
    }
  };
  const exitFullscreen = () => {
    const el = getTargetElement(target);
    if (screenfull.isEnabled && screenfull.element === el) {
      screenfull.exit();
    }
  };
  const toggleFullscreen = () => {
    if (state) {
      exitFullscreen();
    } else {
      enterFullscreen();
    }
  };
  useUnmount(() => {
    if (screenfull.isEnabled) {
      screenfull.off('change', onChange);
    }
  });
  return [state, {
    enterFullscreen: useMemoizedFn(enterFullscreen),
    exitFullscreen: useMemoizedFn(exitFullscreen),
    toggleFullscreen: useMemoizedFn(toggleFullscreen),
    isEnabled: screenfull.isEnabled
  }];
};
export default useFullscreen;