"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _tslib = require("tslib");
var _useCreation = _interopRequireDefault(require("../../useCreation"));
var _useLatest = _interopRequireDefault(require("../../useLatest"));
var _useMemoizedFn = _interopRequireDefault(require("../../useMemoizedFn"));
var _useMount = _interopRequireDefault(require("../../useMount"));
var _useUnmount = _interopRequireDefault(require("../../useUnmount"));
var _useUpdate = _interopRequireDefault(require("../../useUpdate"));
var _Fetch = _interopRequireDefault(require("./Fetch"));
function useRequestImplement(service) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var plugins = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var _options$manual = options.manual,
    manual = _options$manual === void 0 ? false : _options$manual,
    rest = (0, _tslib.__rest)(options, ["manual"]);
  var fetchOptions = Object.assign({
    manual: manual
  }, rest);
  var serviceRef = (0, _useLatest["default"])(service);
  var update = (0, _useUpdate["default"])();
  var fetchInstance = (0, _useCreation["default"])(function () {
    var initState = plugins.map(function (p) {
      var _a;
      return (_a = p === null || p === void 0 ? void 0 : p.onInit) === null || _a === void 0 ? void 0 : _a.call(p, fetchOptions);
    }).filter(Boolean);
    return new _Fetch["default"](serviceRef, fetchOptions, update, Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2["default"])(initState))));
  }, []);
  fetchInstance.options = fetchOptions;
  // run all plugins hooks
  fetchInstance.pluginImpls = plugins.map(function (p) {
    return p(fetchInstance, fetchOptions);
  });
  (0, _useMount["default"])(function () {
    if (!manual) {
      // useCachePlugin can set fetchInstance.state.params from cache when init
      var params = fetchInstance.state.params || options.defaultParams || [];
      // @ts-ignore
      fetchInstance.run.apply(fetchInstance, (0, _toConsumableArray2["default"])(params));
    }
  });
  (0, _useUnmount["default"])(function () {
    fetchInstance.cancel();
  });
  return {
    loading: fetchInstance.state.loading,
    data: fetchInstance.state.data,
    error: fetchInstance.state.error,
    params: fetchInstance.state.params || [],
    cancel: (0, _useMemoizedFn["default"])(fetchInstance.cancel.bind(fetchInstance)),
    refresh: (0, _useMemoizedFn["default"])(fetchInstance.refresh.bind(fetchInstance)),
    refreshAsync: (0, _useMemoizedFn["default"])(fetchInstance.refreshAsync.bind(fetchInstance)),
    run: (0, _useMemoizedFn["default"])(fetchInstance.run.bind(fetchInstance)),
    runAsync: (0, _useMemoizedFn["default"])(fetchInstance.runAsync.bind(fetchInstance)),
    mutate: (0, _useMemoizedFn["default"])(fetchInstance.mutate.bind(fetchInstance))
  };
}
var _default = useRequestImplement;
exports["default"] = _default;