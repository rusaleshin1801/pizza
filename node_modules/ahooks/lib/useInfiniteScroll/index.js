"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _tslib = require("tslib");
var _react = require("react");
var _useEventListener = _interopRequireDefault(require("../useEventListener"));
var _useMemoizedFn = _interopRequireDefault(require("../useMemoizedFn"));
var _useRequest2 = _interopRequireDefault(require("../useRequest"));
var _useUpdateEffect = _interopRequireDefault(require("../useUpdateEffect"));
var _domTarget = require("../utils/domTarget");
var _rect = require("../utils/rect");
var useInfiniteScroll = function useInfiniteScroll(service) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var target = options.target,
    isNoMore = options.isNoMore,
    _options$threshold = options.threshold,
    threshold = _options$threshold === void 0 ? 100 : _options$threshold,
    _options$reloadDeps = options.reloadDeps,
    reloadDeps = _options$reloadDeps === void 0 ? [] : _options$reloadDeps,
    manual = options.manual,
    _onBefore = options.onBefore,
    _onSuccess = options.onSuccess,
    _onError = options.onError,
    _onFinally = options.onFinally;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    finalData = _useState2[0],
    setFinalData = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    loadingMore = _useState4[0],
    setLoadingMore = _useState4[1];
  var noMore = (0, _react.useMemo)(function () {
    if (!isNoMore) return false;
    return isNoMore(finalData);
  }, [finalData]);
  var _useRequest = (0, _useRequest2["default"])(function (lastData) {
      return (0, _tslib.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var currentData;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return service(lastData);
            case 2:
              currentData = _context.sent;
              if (!lastData) {
                setFinalData(currentData);
              } else {
                setFinalData(Object.assign(Object.assign({}, currentData), {
                  // @ts-ignore
                  list: [].concat((0, _toConsumableArray2["default"])(lastData.list), (0, _toConsumableArray2["default"])(currentData.list))
                }));
              }
              return _context.abrupt("return", currentData);
            case 5:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
    }, {
      manual: manual,
      onFinally: function onFinally(_, d, e) {
        setLoadingMore(false);
        _onFinally === null || _onFinally === void 0 ? void 0 : _onFinally(d, e);
      },
      onBefore: function onBefore() {
        return _onBefore === null || _onBefore === void 0 ? void 0 : _onBefore();
      },
      onSuccess: function onSuccess(d) {
        setTimeout(function () {
          // eslint-disable-next-line @typescript-eslint/no-use-before-define
          scrollMethod();
        });
        _onSuccess === null || _onSuccess === void 0 ? void 0 : _onSuccess(d);
      },
      onError: function onError(e) {
        return _onError === null || _onError === void 0 ? void 0 : _onError(e);
      }
    }),
    loading = _useRequest.loading,
    run = _useRequest.run,
    runAsync = _useRequest.runAsync,
    cancel = _useRequest.cancel;
  var loadMore = function loadMore() {
    if (noMore) return;
    setLoadingMore(true);
    run(finalData);
  };
  var loadMoreAsync = function loadMoreAsync() {
    if (noMore) return Promise.reject();
    setLoadingMore(true);
    return runAsync(finalData);
  };
  var reload = function reload() {
    return run();
  };
  var reloadAsync = function reloadAsync() {
    return runAsync();
  };
  var scrollMethod = function scrollMethod() {
    var el = (0, _domTarget.getTargetElement)(target);
    if (!el) {
      return;
    }
    var scrollTop = (0, _rect.getScrollTop)(el);
    var scrollHeight = (0, _rect.getScrollHeight)(el);
    var clientHeight = (0, _rect.getClientHeight)(el);
    if (scrollHeight - scrollTop <= clientHeight + threshold) {
      loadMore();
    }
  };
  (0, _useEventListener["default"])('scroll', function () {
    if (loading || loadingMore) {
      return;
    }
    scrollMethod();
  }, {
    target: target
  });
  (0, _useUpdateEffect["default"])(function () {
    run();
  }, (0, _toConsumableArray2["default"])(reloadDeps));
  return {
    data: finalData,
    loading: !loadingMore && loading,
    loadingMore: loadingMore,
    noMore: noMore,
    loadMore: (0, _useMemoizedFn["default"])(loadMore),
    loadMoreAsync: (0, _useMemoizedFn["default"])(loadMoreAsync),
    reload: (0, _useMemoizedFn["default"])(reload),
    reloadAsync: (0, _useMemoizedFn["default"])(reloadAsync),
    mutate: setFinalData,
    cancel: cancel
  };
};
var _default = useInfiniteScroll;
exports["default"] = _default;