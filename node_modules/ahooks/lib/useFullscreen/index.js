"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _screenfull = _interopRequireDefault(require("screenfull"));
var _useLatest = _interopRequireDefault(require("../useLatest"));
var _useMemoizedFn = _interopRequireDefault(require("../useMemoizedFn"));
var _useUnmount = _interopRequireDefault(require("../useUnmount"));
var _domTarget = require("../utils/domTarget");
var useFullscreen = function useFullscreen(target, options) {
  var _ref = options || {},
    onExit = _ref.onExit,
    onEnter = _ref.onEnter;
  var onExitRef = (0, _useLatest["default"])(onExit);
  var onEnterRef = (0, _useLatest["default"])(onEnter);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var onChange = function onChange() {
    var _a, _b, _c;
    if (_screenfull["default"].isEnabled) {
      var el = (0, _domTarget.getTargetElement)(target);
      if (!_screenfull["default"].element) {
        (_a = onExitRef.current) === null || _a === void 0 ? void 0 : _a.call(onExitRef);
        setState(false);
        _screenfull["default"].off('change', onChange);
      } else {
        var isFullscreen = _screenfull["default"].element === el;
        if (isFullscreen) {
          (_b = onEnterRef.current) === null || _b === void 0 ? void 0 : _b.call(onEnterRef);
        } else {
          (_c = onExitRef.current) === null || _c === void 0 ? void 0 : _c.call(onExitRef);
        }
        setState(isFullscreen);
      }
    }
  };
  var enterFullscreen = function enterFullscreen() {
    var el = (0, _domTarget.getTargetElement)(target);
    if (!el) {
      return;
    }
    if (_screenfull["default"].isEnabled) {
      try {
        _screenfull["default"].request(el);
        _screenfull["default"].on('change', onChange);
      } catch (error) {
        console.error(error);
      }
    }
  };
  var exitFullscreen = function exitFullscreen() {
    var el = (0, _domTarget.getTargetElement)(target);
    if (_screenfull["default"].isEnabled && _screenfull["default"].element === el) {
      _screenfull["default"].exit();
    }
  };
  var toggleFullscreen = function toggleFullscreen() {
    if (state) {
      exitFullscreen();
    } else {
      enterFullscreen();
    }
  };
  (0, _useUnmount["default"])(function () {
    if (_screenfull["default"].isEnabled) {
      _screenfull["default"].off('change', onChange);
    }
  });
  return [state, {
    enterFullscreen: (0, _useMemoizedFn["default"])(enterFullscreen),
    exitFullscreen: (0, _useMemoizedFn["default"])(exitFullscreen),
    toggleFullscreen: (0, _useMemoizedFn["default"])(toggleFullscreen),
    isEnabled: _screenfull["default"].isEnabled
  }];
};
var _default = useFullscreen;
exports["default"] = _default;